package com.sree.stream2;

import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamProgrammingQuestions {

	public static void main(String[] args) {
		String name = "srikantapnigrahi";

		System.out.println("*****count all the occurence of each character in the String ****");
		String[] namedStringArray = name.split("");

		Map<String, Long> mapX = Stream.of(name.split(""))
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

		System.out.println(mapX);

		System.out.println("*****find all the duplicate elements in the String****");

		Arrays.asList(namedStringArray).stream()
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).entrySet().stream()
				.filter(x -> x.getValue() > 1).map(Map.Entry::getKey).collect(Collectors.toList()).stream()
				.forEach(System.out::print);

		System.out.println("*****find all the unique  elements in the String****");

		Arrays.asList(namedStringArray).stream()
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).entrySet().stream()
				.filter(x -> x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList())
				.forEach(System.out::print);

		System.out.println("*****find first non repeative element in the String  ****");
		// But if you will run the code below you may not get the first unique element
		// as the internal implementation of grouby is by default is in HashMap,where
		// the order is not specific , so we can pash linked hash map , to do that we
		// have to supply LinkedHashMap in the groupingby clause

		String firstUniqeVal = Arrays.asList(namedStringArray).stream()
				.collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()))
				.entrySet().stream().filter(x -> x.getValue() == 1).findFirst().get().getKey();

		System.out.println(firstUniqeVal);
		
		
		System.out.println("*****find second highest element in the array  ****");
		
		int[] numArr= {1,34,2,67,6,98,23};
		
		Integer secondHighest = Arrays.stream(numArr).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get();
		System.out.println("*************secondHighest**********   s"+secondHighest);
		
		

	}

}
