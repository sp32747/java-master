package com.sree.stream2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class GroupingByTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		List<Employee> employeeList = EmployeeDAO.getAllEmployees();

		Map<Integer, List<Employee>> grpByMap = employeeList.stream()
				.collect(Collectors.groupingBy(emp -> emp.getAge()));

		// System.out.println(grpByMap.entrySet().stream().iterator().toString());

		System.out
				.println(employeeList.stream().collect(Collectors.groupingBy(emp -> emp.getAge(), Collectors.toSet())));

		List<Integer> employeAgeList = employeeList.stream().map(emp -> emp.getAge()).sorted()
				.collect(Collectors.toList());
		System.out.println(employeAgeList);

		// slicing
		/*
		 * List<Integer> employeSlicedAgeList = employeeList.stream().map(emp ->
		 * emp.getAge()).sorted()
		 * .collect(Collectors.toList()).stream().skip(1).limit(2);
		 * System.out.println(employeSlicedAgeList);
		 */

		// all the names to upper case and comma separated string
		String comasepnam = employeeList.stream().map(emp -> emp.getName()).sorted()
				.collect(Collectors.toList()).stream().map(emp1->emp1.toUpperCase()).collect(Collectors.joining(", "));
		
		
		
		

		String nameCommaSep = employeNameList.stream().map(x -> x.toUpperCase()).collect(Collectors.joining(", "));
		System.out.println(nameCommaSep);

		// Find duplicate names in the list aproach 1
		Set<String> uniqueNames = new HashSet<>();
		Set<String> duplicateNames = employeNameList.stream().filter(name -> !uniqueNames.add(name))
				.collect(Collectors.toSet());

		System.out.println(duplicateNames);

		// count the number of duplicate names fron the name list in a map then show
		// this in a set aproach 2
		Map<String, Long> nameCountMap = employeNameList.stream()
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

		Set<String> duplicateNames2 = nameCountMap.entrySet().stream().filter(entry -> entry.getValue() > 1)
				.map(entry -> entry.getKey()).collect(Collectors.toSet());
		System.out.println(duplicateNames2);

		// count the number of duplicate names fron the name list in a map then show
		// this in a set aproach 3
 
		Set<String> duplicateNames3 = employeNameList.stream()
				.filter(name -> Collections.frequency(employeNameList, name) > 1).collect(Collectors.toSet());
		System.out.println(duplicateNames3);

		//sort the employees according to salary 
		List<Employee> descSalaryEmpList=employeeList.stream().sorted((o1,o2)->(int)(o2.getSalary()-o1.getSalary())).collect(Collectors.toList());
		
		System.out.println(descSalaryEmpList);
		
		
		//for only top3 employees with highest salary
		System.out.println(descSalaryEmpList.stream().limit(3).collect(Collectors.toList()));
		
		//less then 3rd highest salary as the list is descending order
		System.out.println(descSalaryEmpList.stream().skip(3).collect(Collectors.toList()));
		
	}

}
